CBV - Class-Based-Views
https://django.fun/ru/docs/django/4.1/topics/class-based-views/

во вьюхе переписываем функции на классы. в продуктах:
from django.views.generic.base import TemplateView
пишем класс IndexView
в урлах меняем ссылку на функци на ссылку на класс 
path('', IndexView.as_view(), name='index'),

переписываем вьюху продуктов
класс ListView возвращает список объектов, поэтому меняем в шаблонах
for product in object_list
https://docs.djangoproject.com/en/4.1/ref/class-based-views/generic-display/#django.views.generic.list.ListView
настраиваем фильтры, метод get_queryset
Работу с корзиной переводить в классы нет смысла, т.к. придётся переписывать много встроенных методов в классы, хотя подходящий есть - CreateView

LOGIN_REDIRECT_URL = "/"
прописываем в настройках путь для редиректа, используется внутри класса логина
для логаута прописываем в сеттингсах адрес редиректа LOGOUT_REDIRECT_URL = "/"
в урлах импортируем from django.contrib.auth.views import LogoutView и прописываем в путях. отдельно ничего во вьюхе под неё писать не надо

Миксины - дополнительные "примеси" для классов
для добавления вывода сообщений, во вью:
from django.contrib.messages.views import SuccessMessageMixin
class UserRegistrationView(SuccessMessageMixin, CreateView):
миксины должны быть первыми в списке наследования. данный даёт нам возможность использовать success_message

Создаём собственный миксин, common/view.primary
импортируем его во вьюху from common.views import TitleMixin
class IndexView(TitleMixin, TemplateView):
и можем внутри своего классы обращаться к переменным из миксина
title = '' вместо переопределения метода get_context_data(self, **kwargs)


отправка электронной почты
# Настройки почты
EMAIL_HOST = 'smtp.mail.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = ''
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True


Верификация пользователя
Прописываем в моделе новый класс (новую таблицу) в которой будет храниться информация о регистрации пользователя
регистрируем модель в админке
в формах, в классе создания пользователя, переопределяем метод сохранения пользователя, добавляя туда логику отправки письма с подтверждением
в модели добавляем метод отправки письма пользователю
прописываем логику во вьюхе, с формированием ссылки и отправлением письма

в настройках указываем адрес сайта
DOMAIN_NAME = 'http://localhost:8000'


контекстные процессоры
создаём свой, в папке продукты - context_processors.py
там сможем определить переменные, которые будут доступны глобально во всем проекте
переносим туда корзину, прописываем её в сеттингсах и теперь она доступна глобально, нет необходимости отдельно передавать контекст в модель
'context_processors': 'products.context_processors.baskets',

линтеры и форматеры
flake8 - проверяет все пробелы и строки, импорты
isort - сортирует все импорты по источникам и алфавиту


установка и подключение 
pip install psycopg2 - фреймворк для работы с постгрес
прописываем в сеттингсах новую дб
применяем миграции, загружаем данные из фикстур(из бекапа)


регистрация через OAuth 2.0
https://django-allauth.readthedocs.io/en/latest/installation.html
ставим приложение для джанго, прописываем сеттингсы


Тестирование в джанго встроенными средствами
в продуктах прописываем логику в тестах

запускаем тест из консоли
python.exe .\manage.py test products.tests.IndexViewsTestCase.test_view

одинаково выглядящаие queryset'ы не равтны, т.к. хоть и содержат одни даннеы, но созданы в разное время и т.д. т.е. содержат разные данные/свойства
для сравнения можно приводить к списку
self.assertEqual(list(response.context_data['object_list']), list(products[:3]))

python.exe .\manage.py test users.tests.UserRegistrationViewTestCase
python.exe .\manage.py test .  - запустить все тесты, во всех проектах


Кеширование
Django Debug Toolbar
https://django-debug-toolbar.readthedocs.io/en/latest/
Ставим Redis - нереляционная база данных для кеширования
https://redis.io/docs/getting-started/installation/install-redis-on-windows/
Поставить Линукс для винды, в нём установить редис
запустить сервер redis-server

для версии ниже 3.2 поставить библиотеку, в 4 версии она уже есть в комплекте
python -m pip install django-redis
https://docs.djangoproject.com/en/4.1/topics/cache/
первый способ, в лоб - кешируем всю страницу, пишел в урлах:
path('', cache_page(30)(ProductsListView.as_view()), name='index'),

второй способ - кеширование части шаблона
{% load cache %}
{% cache 500 sidebar %}
    .. sidebar ..
{% endcache %}

третий способ - кешировать конкретный продукт
The low-level cache API
https://docs.djangoproject.com/en/4.1/topics/cache/#the-low-level-cache-api
products/view.py
from django.core.cache import cache
    categories = cache.get('categories')
    if not categories:
        context['categories'] = ProductCategory.objects.all()
        cache.set('categories', context['categories'], 30) - пишем в кеш - имя, данные, время
    else:
        context['categories'] = categories


Отложенные задачи
Celery - (message_broker.jpg) - позволяет исполнять задания паралельно
Брокеры сообщений - redis, rabbitmq, zookeeper
pip install celery












