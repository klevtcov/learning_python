md store-server # созаём папку
cd .\store-server\ # переходим в неё
python -m venv venv # устанавливаем виртуальное окружение
.\venv\Scripts\activate # активируем виртуальное окружение
pip install Django==3.2.16 # LTS версия
python.exe -m pip install --upgrade pip # обновить pip
django-admin startproject store # инициализируем проект
python manage.py runserver # запуск сервера
ctrl-c # остановить сервер

python manage.py makemigrations
python manage.py migrate

python manage.py startapp APP_NAME # добавление новых приложений
admin.py # настройки админки
apps.py # модуль настроек приложения
mysite/settings.py INSTALLED_APPS # регистрируем приложение

настройки миграций:
python manage.py makemigrations - создаем и обновляем миграции
python manage.py sqlmigrate news 0001 - посмотреть, какая таблица будет создана
python manage.py migrate - применение всех миграций
если есть ошибка в данных и миграция не осуществляется, можно удалить сам файл миграции и исправить ошибку в коде

store\python manage.py startapp products
store\settings.py INSTALLED_APPS # регистрируем приложение

{{ переменные }} - можно передавать значения
{% теги %} - можно задавать логику {% if ... %} {% endif %}

настройка статики для проекта
{% load static %} - подгружаем статику в шаблон (index.html)
исправить ссылки на статику. теперь, как бы у нас не называлось хранилище, нам достаточно 
поменять путь до него в настройках и данные везде подтянутся правильно
<link href="{% static 'vendor/bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">

динамические urls
{% url 'products' %} - название прописывается в файле urls.py name=

DRY - Dont Repeat Yourself. принцип программирования
наследование  шаблонов
{% extends 'products/base.html' %} - от базового шаблона
{% block content %} {% endblock %} - в базовом шаблоне
{% block content %} .... {% endblock %} - на странице

ORM django - object-relational Mapping
models.py - настраиваем модель данных (создаём таблицы) 

Сделать миграции
makemigrations - создание новых миграций
migrate - применение миграций

python manage.py makemigrations
python manage.py migrate

работа с моделями через консоль
python manage.py shell

pip install django-extensions
python -m pip install ipython

идем в settings.py ->  INSTALLED_APPS и добавляем приложение django_extensions
запускаем через ./manage.py shell_plus

django-extensions - автоматически импортирует нужные нам модели и классы(например, ProductCategory, Product и другие, о которых узнаете позже)
ipyhton - для удобства использования терминала, дает возможность вводить команды clear, cd, pwd не открывая новый терминал

Ручное создание записи, через консоль
>>> from products.models import ProductCategory  
>>> category = ProductCategory(name='Одежда', description='описание для одежды')
>>> category.save()

переопределяем метод __str__ для класса ProductCategory, чтоб выводить в консоль данные об экземпляре класса
def __str__(self):
    return self.name

перезапускаем консоль
>>> from products.models import ProductCategory
>>> category = ProductCategory.objects.get(id=1)  
>>> category
<ProductCategory: Одежда>

>>> ProductCategory.objects.create(name='Обувь')
<ProductCategory: Обувь>

>>> ProductCategory.objects.all()  
<QuerySet [<ProductCategory: Одежда>, <ProductCategory: Обувь>]>

>>> ProductCategory.objects.filter(description=None)
<QuerySet [<ProductCategory: Обувь>]>

Работа с данными через админ-панель
python manage.py createsuperuser
admin.py -> регистрируем модель
from products.models import ProductCategory, Product
admin.site.register(Product)
admin.site.register(ProductCategory)

настройка медиа-файлов
создаём папку media в корне проекта
settings.py ->
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
urls.py -> подтягиваем отображение картинок локально, только если дебаг включен
from django.conf.urls.static import static
from django.conf import settings
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
в шаблоне: {{ product.image.url }}

Fixtures
Отображение данных в виде определенного представления, как вариант - json
python -Xutf8 manage.py dumpdata products.ProductCategory > categories.json
python -Xutf8 manage.py dumpdata products.ProductCategory > goods.json
создаётся бекап базы в выбранном виде
создаём папку products/fixtures 
можно загрузить из бекапа ->
python manage.py loaddata products/fixtures/categories.json


Пространство имён в диспетчере url
store/urls.py - >
from django.urls import path, include - добавили инклуд
from products.views import index, /products/ - удалили импорт продуктов
path('products/', include('products.urls', namespace='products')),

products/urls.py ->
from django.urls import path
from products.views import products
app_name = 'products'
    path('', products, name='index'),

в шаблонах ->
{% url 'products' %} -> {% url 'products:index' %}


Авторизация/регистрация
python manage.py startapp users
регистрируем в settings.py INSTALLED_APPS

users/models.py
from django.contrib.auth.models import AbstractUser
class User(AbstractUser):
    image = models.ImageField(upload_to='users_images', null=True, blank=True)

settings.py -> AUTH_USER_MODEL = 'users.User'

перезаписать бд - удалить, сделать миграции, накатить данные из бекапа

python manage.py makemigrations
python manage.py migrate

регистрируем модель в админке
admin.py -> 
from users.models import User
admin.site.register(User)


создаём шаблоны в папке users, регистрируем во вьюхе
прописываем урлы
store/urls.py ->      path('users/', include('users.urls', namespace='users')),
users/urls.py ->
from django.urls import path
from users.views import login, registration
app_name = 'users'
urlpatterns = [
    path('login/', login, name='login'),
    path('registration/', registration, name='registration'),

прописываем урлы в шаблонах


Формы в Джанго
users/forms.py -> создаём класс на основе существующего в библиотеке
users/views.py -> прописываем логику def login(request): ...

добавляем в формы стили через атрибуты
username = forms.CharField(widget=forms.TextInput(attrs={
    'class': 'form-control py-4', 
    'placeholder': 'Введите имя пользователя'
}))
прописываем инпуты в шаблонах ->
<div class="form-group">
    <label class="small mb-1" for="{{ form.username.id_for_label }}">Имя пользователя</label>
    {{ form.username }}
</div>

регистрация пользователя в базе
users/forms.py -> import UserCreationForm
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
class UserRegistrationForm(UserCreationForm):
users/views.py -> from users.forms import UserLoginForm, UserRegistrationForm
прописать поля в шаблоне
прописать логику во вьюхе

личный кабинет
делаем шаблон users/templates/profile.html
прописываем логику во вьюхе
urls.py -> прописываем адреса
прописываем адреса в шаблонах
создаём класс в формах-Ю import UserChangeForm, прописываем поля
views.py -> import UserProfileForm, прописываем логику
в шаблоне прописываем экшн для формы и поля
во вьюхе прописываем даннвые пользователя из реквеста, для отображения в полях
для загрузки картинок <form action="{% url 'users:profile' %}" method="POST" enctype="multipart/form-data">
и во вьюхе передать файл form = UserProfileForm(instance=request.user, data=request.POST, files=request.FILES)

вывод ошибок
в шаблоне  {{ form.non_field_errors }}   
прописываем в settings.py русский язык, для локализации текста ошибок

вывод сообщения после регистрации
во вьюхе - 
from django.contrib import auth, messages
messages.success(request, 'Поздравляем! Вы успешно зарегистрировались!')
и в шаблоне {% if messages or form.non_field_errors %} и т.д.

логауты
во вьюхе создаём метод, прописываем в urls.py и в шаблонах


Корзина товаров

QuerySet API
https://django.fun/ru/docs/django/4.1/ref/models/querysets/
Product.objects.filter(id=1) - выдаст список QuerySet с данными о первом товаре
Product.objects.get(id=1) - вернёт объект
Product.objects.filter(id=1).exists() - вернёт True, если объект существует 
Product.objects.all().order_by('name') - вернёт отсортированный по полю name список. -name - обратная сортировка
Product.objects.order_by('name') - для выбора всего списка можно не указывать all
Product.objects.filter(name__startwith='Ч') - вернёт товары, начинающиеся с через
Product.objects.get(price__gt=5000) - gt - greater than
ids = [1, 3, 5]
Product.objects.filter(id__in=ids)

Корзина
в приложении продукт, в файле моделей создаём класс корзины
from users.models import User
делаем миграции
в users/view прописываем корзину в profile
from products.models import Basket
переджаём в контекст 'baskets': Basket.objects.all()
в шаблоне корзины делаем проверку

Контроллеры обработчики событий
products/views
from products.models import ProductCategory, Product, Basket
from users.models import User
def basket_add(request, product_id):
в products/urls.py -  from products.views import products, basket_add
прописываем пути для корзины
в шаблоне прописываем действие на кнопку 

подсчет стоимости товаров в корзине
добавляем в моделле метод пожсчёта суммы def sum(self):
прописываем в шаблоне, добавляеи логику в контроллере (не самый лучший вариант):
total_sum = sum(basket.sum() for basket in baskets)
total_quantity = sum(basket.quantity for basket in baskets)
и передаём в контексте
Другой вариант - расширяем класс model.QuerySet своими методами
class BasketQuerySet(models.QuerySet):
    def total_sum(self):
        return sum(basket.sum() for basket in self)
и в классе корзины задаём     objects = BasketQuerySet.as_manager()

декораторы
проверка логина пользователя во вьюхе импортируем
from django.contrib.auth.decorators import login_required
и оборачиваем метод в декоратор:
@login_required
def basket_add(request, product_id):
прописываем логин-урл в сеттингс, т.к. этот декоратор перенаправляет пользователя на страницу входа
LOGIN_URL = '/users/login/'
и добавим аналогичную проверку пользователю на вход в профайл






























