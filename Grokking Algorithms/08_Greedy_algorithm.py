''' Жадный алгоритм '''
# Greedy algorithm — алгоритм, заключающийся в принятии 
# локально оптимальных решений на каждом этапе, допуская, 
# что конечное решение также окажется оптимальным. 
# Известно, что если структура задачи задается матроидом, 
# тогда применение жадного алгоритма выдаст глобальный оптимум.

# Выбор оптимального количества радиостанций для покрытия всей страны

# states_needed = set(['mt', 'wa', 'or', 'id', 'nv', 'ut', 'ca', 'az']) # переданный массив преобразуется в множество, чтобы убрать дубликаты

# stations = {}
# stations['kone'] = set(['id', 'nv', 'ut'])
# stations['ktwo'] = set(['wa', 'id', 'mt'])
# stations['kthree'] = set(['or', 'nv', 'ca'])
# stations['kfour'] = set(['nv', 'ut'])
# stations['kfive'] = set(['ca', 'az'])

# final_station = set()

# while states_needed:
#     best_station = None
#     states_covered = set()
#     for station, states_for_station in stations.items():
#         covered = states_needed & states_for_station # пересечение множеств - поиск элементов, входящих в оба множества. т.е. множество штатов, не входящие в покрытие текущей станцией
#         if len(covered) > len(states_covered): # проверяем, покрывает ли эта станция больше штатов, чем текущая best_station
#             best_station = station # если да - то перезаписываем значение лучшей станции
#             states_covered = covered

#     final_station.add(best_station) # добавляем лучшую станцию в финальный список
#     states_needed -= states_covered # удаляем из требуемого списка штата уже покрытые

# print(final_station) # {'kfive', 'kthree', 'ktwo', 'kone'}


# NP-полные задачи
# Задачи о пересекающихся множествах
# Задача о коммивояжере
# Количество возможных маршрутов растет по факториалу 10 городов - 3 628 800 маршрутов
# Поэтому используется жадный алгоритм, выбирается произвольная точка, а потом ищется ближайший город к ней и т.д.

# Как понять, что задача относится к NP-полным и требуется приблизительное решение:
# 1.Алгоритм работает быстро при малом количестве элементов, но сильно замедляется при увеличчении их числа
# 2. формулировка "все комбинации Х" часто указывает на NP-полноту задачи
# 3. вам приходится вычислять все возможные варианты Х, потому что невозможно разбить на меньшие подзадачи? возможно NP-полная задача
# 4. если задачаимеет последовательность (например городов) и задача не имеет простого решения - возможно np-полная
# 5. если в задаче встречается некоторое множество и задача не имеет простого решения
# 6. можно ли переформулировать задачу в условиях задачи покрытия множества или задачи о коммивояжере? это np-полная задача





